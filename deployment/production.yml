version: '3.8'

services:
  # Redis for production order queuing
  redis-prod:
    image: redis:7-alpine
    container_name: trading_redis_prod
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_prod_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - trading_network

  # HTTPS Web Server
  web-server-prod:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.web
    container_name: trading_web_server_prod
    ports:
      - "80:8000"
      - "443:8443"
    environment:
      # Server Configuration
      - WEB_SERVER_HOST=0.0.0.0
      - WEB_SERVER_PORT=8000
      - SSL_CERTFILE=/app/certs/fullchain.pem
      - SSL_KEYFILE=/app/certs/privkey.pem
      
      # Redis Configuration
      - REDIS_HOST=redis-prod
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=0
      
      # Security Configuration
      - TRADINGVIEW_WEBHOOK_SECRET=${TRADINGVIEW_WEBHOOK_SECRET}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - API_RATE_LIMIT_PER_MINUTE=100
      - WEBHOOK_RATE_LIMIT_PER_MINUTE=60
      
      # Trading Configuration
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_SECRET=${BINANCE_SECRET}
      - EXCHANGE_SANDBOX=false
      - MAX_RISK_PER_TRADE=0.02
      - MAX_DAILY_LOSS=0.05
      
      # Logging
      - LOG_LEVEL=INFO
      - ENABLE_ACCESS_LOGS=true
      - ENABLE_METRICS=true
      
      # Database
      - DATABASE_URL=${DATABASE_URL}
      
      # Environment
      - ENVIRONMENT=production
    volumes:
      - ../logs:/app/logs
      - ./ssl:/app/certs:ro
      - ../config:/app/config:ro
    depends_on:
      redis-prod:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "https://localhost:8443/status/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - trading_network

  # Discord Bot (if running alongside web server)
  discord-bot-prod:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    container_name: trading_discord_bot_prod
    environment:
      - DISCORD_TOKEN=${DISCORD_TOKEN}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - REDIS_HOST=redis-prod
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_SECRET=${BINANCE_SECRET}
    volumes:
      - ../logs:/app/logs
      - ../config:/app/config:ro
    depends_on:
      redis-prod:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - trading_network

  # Nginx Reverse Proxy with SSL Termination
  nginx-proxy:
    image: nginx:alpine
    container_name: trading_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - web-server-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - trading_network

  # Database (PostgreSQL for production)
  postgres-prod:
    image: postgres:15-alpine
    container_name: trading_postgres_prod
    environment:
      - POSTGRES_DB=trading_bot_prod
      - POSTGRES_USER=tradingbot
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tradingbot -d trading_bot_prod"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - trading_network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: trading_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - trading_network

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: trading_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    networks:
      - trading_network

  # Log aggregation
  fluent-bit:
    image: fluent/fluent-bit:latest
    container_name: trading_logs
    volumes:
      - ../logs:/app/logs:ro
      - ./logging/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
    depends_on:
      - web-server-prod
      - discord-bot-prod
    restart: unless-stopped
    networks:
      - trading_network

volumes:
  redis_prod_data:
    driver: local
  postgres_prod_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  trading_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 