version: '3.8'

services:
  tradingbot:
    build: .
    container_name: trading_bot_prod
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://tradingbot:${DB_PASSWORD}@postgres:5432/trading_bot_prod
      - REDIS_URL=redis://redis:6379/0
      - DISCORD_TOKEN=${DISCORD_TOKEN}
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_SECRET=${BINANCE_SECRET}
      - EXCHANGE_SANDBOX=${EXCHANGE_SANDBOX:-false}
      - MAX_RISK_PER_TRADE=${MAX_RISK_PER_TRADE:-0.01}
      - MAX_DAILY_LOSS=${MAX_DAILY_LOSS:-0.03}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./results:/app/results
    ports:
      - "8080:8080"
    networks:
      - internal
    healthcheck:
      test: ["CMD", "python", "-c", "import os; exit(0 if os.path.exists('/tmp/bot_healthy') else 1)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  postgres:
    image: postgres:14-alpine
    container_name: trading_bot_postgres_prod
    environment:
      POSTGRES_DB: trading_bot_prod
      POSTGRES_USER: tradingbot
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - internal
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tradingbot -d trading_bot_prod"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c max_connections=100
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB

  redis:
    image: redis:7-alpine
    container_name: trading_bot_redis_prod
    networks:
      - internal
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      redis-server
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru

  nginx:
    image: nginx:alpine
    container_name: trading_bot_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - tradingbot
    networks:
      - internal
    restart: unless-stopped

  # Monitoring stack
  prometheus:
    image: prom/prometheus:latest
    container_name: trading_bot_prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - internal
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: trading_bot_grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - internal
    restart: unless-stopped

  # Log aggregation
  loki:
    image: grafana/loki:latest
    container_name: trading_bot_loki
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - internal
    restart: unless-stopped

  promtail:
    image: grafana/promtail:latest
    container_name: trading_bot_promtail
    volumes:
      - ./logs:/var/log/app:ro
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - internal
    restart: unless-stopped

volumes:
  postgres_prod_data:
  prometheus_data:
  grafana_data:
  loki_data:

networks:
  internal:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 