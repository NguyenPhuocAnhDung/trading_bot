version: '3.8'

services:
  tradingbot:
    build: .
    container_name: trading_bot_dev
    volumes:
      - .:/app
      - ./logs:/app/logs
      - ./data:/app/data
      - ./results:/app/results
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://tradingbot:password@postgres:5432/trading_bot_dev
      - REDIS_URL=redis://redis:6379/0
      - DISCORD_TOKEN=${DISCORD_TOKEN}
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_SECRET=${BINANCE_SECRET}
      - EXCHANGE_SANDBOX=true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - bot-network

  postgres:
    image: postgres:14-alpine
    container_name: trading_bot_postgres_dev
    environment:
      POSTGRES_DB: trading_bot_dev
      POSTGRES_USER: tradingbot
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tradingbot -d trading_bot_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - bot-network

  redis:
    image: redis:7-alpine
    container_name: trading_bot_redis_dev
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - bot-network

  adminer:
    image: adminer:latest
    container_name: trading_bot_adminer
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - bot-network

volumes:
  postgres_dev_data:

networks:
  bot-network:
    driver: bridge 